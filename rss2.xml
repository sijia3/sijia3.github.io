<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>sijia3&#39;blog</title>
    <link>http://www.sijia3.top/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>我是一个无聊的人</description>
    <pubDate>Thu, 16 Aug 2018 09:45:00 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>dddd</title>
      <link>http://www.sijia3.top/2018/08/16/dddd/</link>
      <guid>http://www.sijia3.top/2018/08/16/dddd/</guid>
      <pubDate>Thu, 16 Aug 2018 09:45:00 GMT</pubDate>
      <description>
      
      </description>
      
      <comments>http://www.sijia3.top/2018/08/16/dddd/#disqus_thread</comments>
    </item>
    
    <item>
      <title>静态资源配置问题</title>
      <link>http://www.sijia3.top/2018/04/18/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</link>
      <guid>http://www.sijia3.top/2018/04/18/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</guid>
      <pubDate>Wed, 18 Apr 2018 13:05:18 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;关于静态资源的配置相关问题。&lt;/p&gt;
&lt;p&gt;Spring Boot 默认为我们提供了静态资源处理,默认有下面文件夹：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;classpath:/META-INF/resources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;classpath:/reso
        
      
      </description>
      
      <content:encoded><![CDATA[<p>关于静态资源的配置相关问题。</p><p>Spring Boot 默认为我们提供了静态资源处理,默认有下面文件夹：</p><ul><li><p>classpath:/META-INF/resources</p></li><li><p>classpath:/resources</p></li><li><p>classpath:/static</p></li><li><p>classpath:/public</p></li></ul><p>这些都是静态资源默认的映射路径。</p><p>但如果你觉得这些路径不行，想要自定义路径，也是可以的。</p><h3 id="接管Spring-boot-的Web配置"><a href="#接管Spring-boot-的Web配置" class="headerlink" title="接管Spring boot 的Web配置"></a>接管Spring boot 的Web配置</h3><p>1.通常情况下，Spring boot自动配置是符合我们的开发需求，如果你既需要保留Spring boot提供的便利(如只想修改映射路径)，又想加入自己额外的一些配置，可以定义一个配置类并继承WebMvcConfigurerAdapter类，而无需使用@EnableWebMvc注解。</p><p>2.如果你觉得Spring Boot提供的SpingMVC不符合要求，则可以通过一个配置类（注解有@Configuration的类）加上@EnableWebMvc注解来实现完全自己控制的MVC配置。</p><h3 id="自定义资源映射addResourceHandlers"><a href="#自定义资源映射addResourceHandlers" class="headerlink" title="自定义资源映射addResourceHandlers"></a>自定义资源映射addResourceHandlers</h3><p>想要自定义静态资源路径，只需重写addResourceHandlers方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebMvcConfigurerAdapter</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置静态访问资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/my/**"</span>).addResourceLocations(<span class="string">"classpath:/my/"</span>);</span><br><span class="line">        <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面跳转addViewControllers"><a href="#页面跳转addViewControllers" class="headerlink" title="页面跳转addViewControllers"></a>页面跳转addViewControllers</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以前要访问一个页面需要先创建个Controller控制类，再写方法跳转到页面</span></span><br><span class="line"><span class="comment">     * 在这里配置后就不需要那么麻烦了，直接访问http://localhost:8080/toLogin就跳转到login.jsp页面了</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/toLogin"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">        <span class="keyword">super</span>.addViewControllers(registry);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="拦截器addInterceptors"><a href="#拦截器addInterceptors" class="headerlink" title="拦截器addInterceptors"></a>拦截器addInterceptors</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sijia3.interceptor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag =<span class="keyword">true</span>;</span><br><span class="line">        User user=(User)request.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>==user)&#123;</span><br><span class="line">            response.sendRedirect(<span class="string">"toLogin"</span>);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="深坑在此："><a href="#深坑在此：" class="headerlink" title="深坑在此："></a>深坑在此：</h1><p>不过，在SpringBoot2.0后，WebMvcConfigurerAdapter以被废弃，我找到了WebMvcConfigurationSupport这个类，<br>但是如果想继承这个类来写拦截器，会出现问题就是，你如果不在preHandle自定义静态模板路径，会导致静资源访问不了。</p><p>后来找网上找到一个答案说，@EnableWebMvc=WebMvcConfigurationSupport，使用了@EnableWebMvc注解等于扩展了WebMvcConfigurationSupport但是没有重写任何方法。(意思就是说继承WebMvcConfigurationSupport的话，所有想要实现的东西都要自己重写喽，例如静态模板路径)</p><p>好吧好吧，如果继承WebMvcConfigurationSupport类的话，记得自定义静态资源路径。不然就直接继承那个被废弃的WebMvcConfigurerAdapter类吧哈哈。</p>]]></content:encoded>
      
      <comments>http://www.sijia3.top/2018/04/18/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>java web项目推荐结构</title>
      <link>http://www.sijia3.top/2018/04/17/java-web%E9%A1%B9%E7%9B%AE%E6%8E%A8%E8%8D%90%E7%BB%93%E6%9E%84/</link>
      <guid>http://www.sijia3.top/2018/04/17/java-web%E9%A1%B9%E7%9B%AE%E6%8E%A8%E8%8D%90%E7%BB%93%E6%9E%84/</guid>
      <pubDate>Tue, 17 Apr 2018 09:27:16 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;前言：一个良好的工程结构划分可以使项目更加清晰，明确。提高代码的统一性和便于后期的维护和管理。&lt;/p&gt;
&lt;h2 id=&quot;下面给出推荐工程结构：&quot;&gt;&lt;a href=&quot;#下面给出推荐工程结构：&quot; class=&quot;headerlink&quot; title=&quot;下面给出推荐工程结构：&quot;&gt;&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<p>前言：一个良好的工程结构划分可以使项目更加清晰，明确。提高代码的统一性和便于后期的维护和管理。</p><h2 id="下面给出推荐工程结构："><a href="#下面给出推荐工程结构：" class="headerlink" title="下面给出推荐工程结构："></a>下面给出推荐工程结构：</h2><pre><code>com    +- sijia3        +- domain        | +- Customer.java        |        +- dao        | +-         | +- CustomerRepository.java        |        +- service        | +- CustomerService.java        |        +- controller        | +- CustomerController.java        |        +- Application.java        |</code></pre><ol><li>实体类(domain),存放用户定义的实体类。</li><li>数据访问层(Dao),提供数据库的方法，可用jpa实现更为方便。</li><li>业务逻辑层(service),主要写一些处理逻辑业务关系的代码。</li><li>控制层(controller),负责页面访问控制，如提供api</li><li>Application.java 是应用的启动类，一切从此开始。</li></ol>]]></content:encoded>
      
      <comments>http://www.sijia3.top/2018/04/17/java-web%E9%A1%B9%E7%9B%AE%E6%8E%A8%E8%8D%90%E7%BB%93%E6%9E%84/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
